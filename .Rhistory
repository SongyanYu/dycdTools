# add package imported
use_package("dplyr",type = "Imports")
library(usethis)
# add package imported
use_package("dplyr",type = "Imports")
use_package("ncdf4",type = "Imports")
use_package("tidyr",type = "Imports")
use_package("hydroGOF",type = "Imports")
use_package("ggplot2",type = "Imports")
# add data
output_name<-read.csv("../dycdTools/Data/Output variables.csv")
?use_data
use_data(output_name)
library(devtools)
devtools::document()
devtools::document()
devtools::document()
e
#devtools::install_github("gustavdelius/roxygen")
library(roxygen2)
roxygenise()
library(dycdtool3)
?
)
devtools::document()
devtools::document()
devtools::load_all()
# create R file
use_r(name = "test.R")
library(devtools)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
output.name<-data.frame(data("output_name"))
View(output.name)
output.name<-data("output_name")
output.name
data("output_name")
data("output_name")
View(output_name)
library(devtools)
devtools::document()
devtools::document()
library(devtools)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
# add data
output_name<-read.csv("../dycdTools/Data/Output variables.csv")
View(output_name)
# add data
output_name<-read.csv("../dycdTools/Data/Output variables.csv")
View(output_name)
library(usethis)
use_data(output_name)
use_data(output_name,overwrite = TRUE)
devtools::load_all()
phyto.group<-c("CHLOR","FDIAT","NODUL","CYANO","CRYPT")
use_data(phyto.group)
# add data
output_name<-read.csv("../dycdTools/Data/Output variables.csv")
use_data(output_name,overwrite = TRUE)
# add data
output_name<-read.csv("../dycdTools/Data/Output variables.csv")
use_data(output_name,overwrite = TRUE)
View(output_name)
devtools::document()
devtools::document()
# create R file
use_r(name = "test.R")
library(usethis)
# create R file
use_r(name = "test.R")
devtools::document()
library(usethis)
#---
# 1. load all developed functions and internal data (like the "library" function)
#---
devtools::load_all() # the working directory should be in the top level package folder
#---
# 3. test the function of extracting dycd output
#---
var.values<-extract.output(dycd.output = "../LHM_Sim/200318-lhm-ref/DYsim.nc",
var.extract = c("TEMP","DO","SALINITY","TN","TP","NO3","NH4","PO4","EVAP","CHLA"))
#---
# 3. test the function of extracting dycd output
#---
var.values<-extract.output(dycd.output = "../200318-lhm-ref/DYsim.nc",
var.extract = c("TEMP","DO","SALINITY","TN","TP","NO3","NH4","PO4","EVAP","CHLA"))
#---
# 3. test the function of extracting dycd output
#---
var.values<-extract.output(dycd.output = "../Example data/200318-lhm-ref/DYsim.nc",
var.extract = c("TEMP","DO","SALINITY","TN","TP","NO3","NH4","PO4","EVAP","CHLA"))
for(i in 1:length(var.values)){
expres<-paste0(names(var.values)[i],"<-data.frame(var.values[[",i,"]])")
eval(parse(text=expres))
}
# interpolation of temperature simulations from depth=0 to depth=maximum.
temp.interpolated<-interpol(layerHeights = dyresmLAYER_HTS_Var,
var = dyresmTEMPTURE_Var,
min.dept = 0,max.dept = 13,by.value = 0.5)
contour.plot(var.matrix = temp.interpolated,
file_name = paste0("../Example data/Figure/contour_TEMP_v",plot.version,".png"),
start.date="2017-06-06",end.date="2020-02-29",
legend.title = "Temperature\n(\u00B0C)",
min.z = min(temp.interpolated),
max.z = max(temp.interpolated),
min.depth = 0,max.depth = 13,by.value = 0.5)
#---
# 1. load all developed functions and internal data (like the "library" function)
#---
devtools::load_all() # the working directory should be in the top level package folder
#---
# 3. test the function of extracting dycd output
#---
var.values<-extract.output(dycd.output = "../Example data/200318-lhm-ref/DYsim.nc",
var.extract = c("TEMP","DO","SALINITY","TN","TP","NO3","NH4","PO4","EVAP","CHLA"))
for(i in 1:length(var.values)){
expres<-paste0(names(var.values)[i],"<-data.frame(var.values[[",i,"]])")
eval(parse(text=expres))
}
# interpolation of temperature simulations from depth=0 to depth=maximum.
temp.interpolated<-interpol(layerHeights = dyresmLAYER_HTS_Var,
var = dyresmTEMPTURE_Var,
min.dept = 0,max.dept = 13,by.value = 0.5)
contour.plot(var.matrix = temp.interpolated,
file_name = paste0("../Example data/Figure/contour_TEMP_v",plot.version,".png"),
start.date="2017-06-06",end.date="2020-02-29",
legend.title = "Temperature\n(\u00B0C)",
min.z = min(temp.interpolated),
max.z = max(temp.interpolated),
min.depth = 0,max.depth = 13,by.value = 0.5)
devtools::document()
#---
# 1. load all developed functions and internal data (like the "library" function)
#---
devtools::load_all() # the working directory should be in the top level package folder
#---
# 3. test the function of extracting dycd output
#---
var.values<-extract.output(dycd.output = "../Example data/200318-lhm-ref/DYsim.nc",
var.extract = c("TEMP","DO","SALINITY","TN","TP","NO3","NH4","PO4","EVAP","CHLA"))
for(i in 1:length(var.values)){
expres<-paste0(names(var.values)[i],"<-data.frame(var.values[[",i,"]])")
eval(parse(text=expres))
}
# interpolation of temperature simulations from depth=0 to depth=maximum.
temp.interpolated<-interpol(layerHeights = dyresmLAYER_HTS_Var,
var = dyresmTEMPTURE_Var,
min.dept = 0,max.dept = 13,by.value = 0.5)
contour.plot(var.matrix = temp.interpolated,
file_name = paste0("../Example data/Figure/contour_TEMP_v",plot.version,".png"),
start.date="2017-06-06",end.date="2020-02-29",
legend.title = "Temperature\n(\u00B0C)",
min.z = min(temp.interpolated),
max.z = max(temp.interpolated),
min.depth = 0,max.depth = 13,by.value = 0.5)
contour.plot(var.matrix = temp.interpolated,
file_name = "../Example data/Figure/contour_TEMP_v.png",
start.date="2017-06-06",end.date="2020-02-29",
legend.title = "Temperature\n(\u00B0C)",
min.z = min(temp.interpolated),
max.z = max(temp.interpolated),
min.depth = 0,max.depth = 13,by.value = 0.5)
# Before testing other plot functions, read in observed water quality data.
obs.lhm<-read.csv("../Example data/Data/Obs LHM.csv")
obs.lhm$Date<-as.Date(obs.lhm$Date,format="%d/%m/%Y")
obs.temp<-obs.lhm[,c(1,2,3)]
# 4.2 scatter plot of temperature
scatter.plot(sim=temp.interpolated,
obs=obs.temp,
start.date="2017-06-06",end.date="2020-02-29",
file_name = "../Example data/Figure/Scatter plot_TEMP_v.png",
min.depth = 0,max.depth = 13,by.value = 0.5)
# 4.3 profile plot of temperature
profile.plot(sim=temp.interpolated,
obs = obs.temp,
file_name = "../Example data/Figure/profile_TEMP_v.png",
xlabel = "Temperature \u00B0C",
min.depth = 0,max.depth = 13,by.value = 0.5)
# 4.4 time serise plot
ts.plot(sim = temp.interpolated,
obs = obs.temp,
file_name="Figure/TS_TEMP_v.png",
target.depth=c(0,10),
start.date="2017-06-06",end.date="2020-02-29",
min.depth=0,
max.depth=13,
by.value=0.5,
ylabel="Temperature \u00B0C")
# 4.4 time serise plot
ts.plot(sim = temp.interpolated,
obs = obs.temp,
file_name="../Example data/Figure/TS_TEMP_v.png",
target.depth=c(0,10),
start.date="2017-06-06",end.date="2020-02-29",
min.depth=0,
max.depth=13,
by.value=0.5,
ylabel="Temperature \u00B0C")
#---
# 2. test autoCalibration function to auto-calibrate dycd parameters
#    takes 10-15 minutes to run
#---
autoCalibration(cal.para = "../Example data/Data/Calibration parameters.csv",
combination = "random",
n = 2,
model.var = c("TEMP","DO","SALINITY","TN","TP","NO3","PO4","NH4","CHLA"),
phyto.group = c("NODUL","CYANO"),
obs.data = "../Example data/Data/Obs LHM.csv",
objective.function = c("nse"),
start.date = "2017-06-06",
end.date = "2020-02-29",
dycd.wd = "../Example data/200318-lhm-ref/",
dycd.output = "../Example data/200318-lhm-ref/DYsim.nc",
file_name = "../Example data/Data/auto-calibration.csv")
#---
# 3. test the function of extracting dycd output
#---
var.values<-extract.output(dycd.output = "../Example data/200318-lhm-ref/DYsim.nc",
var.extract = c("TEMP","DO","SALINITY","TN","TP","NO3","NH4","PO4","EVAP","CHLA"))
for(i in 1:length(var.values)){
expres<-paste0(names(var.values)[i],"<-data.frame(var.values[[",i,"]])")
eval(parse(text=expres))
}
# interpolation of temperature simulations from depth=0 to depth=maximum.
temp.interpolated<-interpol(layerHeights = dyresmLAYER_HTS_Var,
var = dyresmTEMPTURE_Var,
min.dept = 0,max.dept = 13,by.value = 0.5)
contour.plot(var.matrix = temp.interpolated,
file_name = "../Example data/Figure/contour_TEMP.png",
start.date="2017-06-06",end.date="2020-02-29",
legend.title = "Temperature\n(\u00B0C)",
min.z = min(temp.interpolated),
max.z = max(temp.interpolated),
min.depth = 0,max.depth = 13,by.value = 0.5)
# Before testing other plot functions, read in observed water quality data.
obs.lhm<-read.csv("../Example data/Data/Obs LHM.csv")
obs.lhm$Date<-as.Date(obs.lhm$Date,format="%d/%m/%Y")
obs.temp<-obs.lhm[,c(1,2,3)]
# 4.2 scatter plot of temperature
scatter.plot(sim=temp.interpolated,
obs=obs.temp,
start.date="2017-06-06",end.date="2020-02-29",
file_name = "../Example data/Figure/Scatter plot_TEMP.png",
min.depth = 0,max.depth = 13,by.value = 0.5)
# 4.3 profile plot of temperature
profile.plot(sim=temp.interpolated,
obs = obs.temp,
file_name = "../Example data/Figure/profile_TEMP.png",
xlabel = "Temperature \u00B0C",
min.depth = 0,max.depth = 13,by.value = 0.5)
# 4.4 time serise plot
ts.plot(sim = temp.interpolated,
obs = obs.temp,
file_name="../Example data/Figure/TS_TEMP.png",
target.depth=c(0,10),
start.date="2017-06-06",end.date="2020-02-29",
min.depth=0,
max.depth=13,
by.value=0.5,
ylabel="Temperature \u00B0C")
devtools::document()
#---
# 1. load all developed functions and internal data (like the "library" function)
#---
devtools::load_all() # the working directory should be in the top level package folder
library(devtools)
devtools::document()
#---
# 1. load all developed functions and internal data (like the "library" function)
#---
devtools::load_all() # the working directory should be in the top level package folder
library(usethis)
# add data
output_name<-read.csv("../dycdTools/Data/Output variables.csv")
use_data(output_name,overwrite = TRUE)
library(devtools)
devtools::load_all()
devtools::document()
library(usethis)
# add data
output_name<-read.csv("../dycdTools/Data/Output variables.csv")
use_data(output_name,overwrite = TRUE)
library(devtools)
devtools::load_all()
devtools::document()
library(usethis)
# add data
output_name<-read.csv("../dycdTools/Data/Output variables.csv")
use_data(output_name,overwrite = TRUE)
library(devtools)
devtools::load_all()
devtools::document()
library(usethis)
# add data
output_name<-read.csv("../dycdTools/Data/Output variables.csv")
use_data(output_name,overwrite = TRUE)
library(devtools)
devtools::load_all()
devtools::document()
library(usethis)
# add data
output_name<-read.csv("../dycdTools/Data/Output variables.csv")
use_data(output_name,overwrite = TRUE)
library(devtools)
devtools::load_all()
devtools::document()
library(devtools)
devtools::load_all()
devtools::load_all()
devtools::document()
library(devtools)
devtools::load_all()
devtools::document()
library(Rtools)
library(usethis)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?use_package
# ingore some R scripts
use_build_ignore("pkg_dev.R")
use_build_ignore("test.R")
use_build_ignore("example")
use_build_ignore(".Rhistory")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
# license
use_mit_license()
?use_mit_license
# license
use_mit_license(name = "MIT")
# add data
output_name<-read.csv("../dycdTools/Data/Output variables.csv")
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
?filled.contour
devtools::document()
data("output_name")
#'
#' @export
devtools::document()
devtools::document()
?contour
?filled.contour
data("data/output_name.rda")
load("data/output_name.rda")
View(output_name)
write.csv(output_name,file = "data/output_name.csv",row.names = FALSE)
use_build_ignore("data/output_name.csv")
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
use_build_ignore("data/output_name.csv")
use_build_ignore(".Rhistory")
use_build_ignore("example")
# ingore some R scripts
use_build_ignore("pkg_dev.R")
use_build_ignore("test.R")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
library(ggplot2)
?scale_color_gradient
devtools::document()
devtools::check()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?scale_color_gradientn
?brewer.pal
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?use_package
use_package("lubridate",type="Imports")
use_package("RColorBrewer",type = "Imports")
devtools::document()
devtools::document()
devtools::document()
use_package("lubridate",type="Imports")
lubridate::fun()
devtools::document()
devtools::check()
use_package("lubridate",type="Imports")
use_package("lubridate",type="Imports")
devtools::document()
devtools::check()
use_package("lubridate",type="Imports")
devtools::check()
?fill.contour
?filled.contour
devtools::document()
?profile
devtools::document()
devtools::load_all()
devtools::document()
devtools::check()
devtools::document()
?Deprecated
update.packages("roxygen2")
devtools::document()
library(roxygen2)
# run R CMD check on CRAN's servers
devtools::build_win()
# run R CMD check on CRAN's servers
devtools::build()
devtools::document()
install.packages("roxygen2")
install.packages("roxygen2")
devtools::load_all()
devtools::document()
use_build_ignore("cran-comments.md")
library(usethis)
use_build_ignore("cran-comments.md")
# run R CMD check on CRAN's servers
devtools::build()
# run R CMD check on CRAN's servers
devtools::build_win()
# Release
devtools::release()
# check on R-hub
devtools::check_rhub()
# check on R-hub
devtools::check_rhub()
# check on R-hub
devtools::check_rhub()
# check on R-hub
devtools::check_rhub()
# check on R-hub
devtools::check_rhub()
# check on R-hub
devtools::check_rhub()
# check on R-hub
devtools::check_rhub()
# check on R-hub
devtools::check_rhub()
# check on R-hub
devtools::check_rhub()
list_validated_email
# Release
library(rhub)
list_validated_emails()
validate_email(email = sunny.yu@griffith.edu.au)
?validate_email
validate_email()
validate_email()
validate_email()
validate_email()
list_validated_email()
list_validated_emails()
# check on R-hub
devtools::check_rhub()
devtools::check_rhub()
list_validated_emails()
# check on R-hub
library(rhub)
list_validated_emails()
validate_email()
devtools::check_rhub()
# vignette
use_vignette
library(usethis)
# vignette
use_vignette()
?use_vignette
