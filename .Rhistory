min.depth=0,max.depth=13,by.value=0.5,
nlevels=20,
plot.save=FALSE,
file_name="Contour_temp.png",
height=5,width=8,ppi=150)
scatter.plot(sim=temp.interpolated,
obs=obs_temp,
sim.start="2017-06-06",
sim.end="2017-06-15",
plot.start="2017-06-06",
plot.end="2017-06-15",
plot.save=FALSE,
min.depth = 0,max.depth = 13,by.value = 0.5)
prof.plot(sim=temp.interpolated,
obs = obs_temp,
sim.start="2017-06-06",
sim.end="2017-06-15",
plot.start="2017-06-06",
plot.end="2017-06-15",
xlabel = "Temperature \u00B0C",
min.depth = 0,max.depth = 13,by.value = 0.5)
ts.plot(sim = temp.interpolated,
obs = obs_temp,
target.depth=c(1,6),
sim.start="2017-06-06",
sim.end="2017-06-15",
plot.start="2017-06-06",
plot.end="2017-06-15",
ylabel="Temperature \u00B0C",
min.depth=0,
max.depth=13,
by.value=0.5)
# contour plot of temperature simulations
cont.plot(sim=temp.interpolated,
start.date="2017-06-06",end.date="2017-06-15",
legend.title="T \u00B0C",
min.depth=0,max.depth=13,by.value=0.5,
nlevels=20,
plot.save=FALSE,
file_name="Contour_temp.png",
height=5,width=8,ppi=150)
cont.plot.comp(sim=temp.interpolated,
obs=obs_temp,
start.date="2017-06-06",end.date="2017-06-15",
date=NULL,
legend.title="T \u00B0C",
min.depth=0,max.depth=13,by.value=0.5,
nlevels=20,
plot.save=FALSE,
file_name="Contour_temp.png",
height=5,width=8,ppi=150)
sim=temp.interpolated
obs=obs_temp
start.date="2017-06-06"
end.date="2017-06-15"
date=NULL
legend.title="T \u00B0C"
min.depth=0
max.depth=13
by.value=0.5
nlevels=20
plot.save=FALSE
#---
# 1. simulation period
#---
if(is.null(date)){
date<-seq.Date(from = as.Date(start.date,format="%Y-%m-%d"),
to = as.Date(end.date,format="%Y-%m-%d"),
by="day")
}
date
index<-match(seq(lubridate::year(date)[1],lubridate::year(date)[length(date)],by=1),lubridate::year(date))
levels<-pretty(range(sim,obs[,3],na.rm = TRUE),nlevels)
color.palette <- function(n)hcl.colors(n,"RdBu",rev=TRUE)
colour<-unlist(lapply(obs[,3],FUN = function(x) color.palette(length(levels)-1)[length(which(levels<x))]))
colour
colnames(obs)<-c("Date","Depth","Value")
obs<-obs%>%
filter(Date>=date[1]&Date<=date[length(date)],
!is.na(Value))%>%
mutate(Date=as.Date(Date,format="%Y-%m-%d"))
obs
obs_temp
obs_temp<-read.csv("data/obs_temp.csv")
use_data(obs_temp,overwrite = TRUE)
devtools::document()
cont.plot.comp(sim=temp.interpolated,
obs=obs_temp,
start.date="2017-06-06",end.date="2017-06-15",
date=NULL,
legend.title="T \u00B0C",
min.depth=0,max.depth=13,by.value=0.5,
nlevels=20,
plot.save=FALSE,
file_name="Contour_temp.png",
height=5,width=8,ppi=150)
scatter.plot(sim=temp.interpolated,
obs=obs_temp,
sim.start="2017-06-06",
sim.end="2017-06-15",
plot.start="2017-06-06",
plot.end="2017-06-15",
plot.save=FALSE,
min.depth = 0,max.depth = 13,by.value = 0.5)
# contour plot of temperature simulations
cont.plot(sim=temp.interpolated,
start.date="2017-06-06",end.date="2017-06-15",
legend.title="T \u00B0C",
min.depth=0,max.depth=13,by.value=0.5,
nlevels=20,
plot.save=FALSE,
file_name="Contour_temp.png",
height=5,width=8,ppi=150)
cont.plot.comp(sim=temp.interpolated,
obs=obs_temp,
start.date="2017-06-06",end.date="2017-06-15",
date=NULL,
legend.title="T \u00B0C",
min.depth=0,max.depth=13,by.value=0.5,
nlevels=20,
plot.save=FALSE,
file_name="Contour_temp.png",
height=5,width=8,ppi=150)
sim=temp.interpolated
obs=obs_temp
sim.start="2017-06-06"
sim.end="2017-06-15"
plot.start="2017-06-06"
plot.end="2017-06-15"
plot.save=FALSE
#---
# 1. simulation period
#---
sim.date<-seq.Date(from = as.Date(sim.start,format="%Y-%m-%d"),
to = as.Date(sim.end,format="%Y-%m-%d"),
by="day")
sim.date
#---
# 2. combine sim with obs by Date and Depth
#---
sim.temp<-as.data.frame(sim)
colnames(sim.temp)<-sim.date
sim.temp$Depth<-seq(min.depth,max.depth,by=by.value)
colnames(obs)<-c("Date","Depth","Value")
obs<-obs%>%
mutate(Date=as.Date(Date,format="%Y-%m-%d"))
obs
temp.both<-sim.temp%>%
pivot_longer(-Depth,names_to = "Date",values_to = "sim")%>%
mutate(Date=as.Date(Date,format="%Y-%m-%d"))%>%
right_join(.,obs,by=c("Date","Depth"))%>%
filter(Date>=plot.start&Date<=plot.end)
temp.both
colnames(temp.both)[4]<-"obs"
p<-temp.both%>%
ggplot(aes(x=obs,y=sim,colour=Depth))+
geom_point()+
geom_abline(color="red")+
scale_color_gradientn(colors = brewer.pal(11, "Spectral"), name = "Depth (m)")+
xlab("Observed")+
ylab("Simulated")+
theme_classic()
p
plot.save
if(plot.save){
p+ggsave(filename = file_name,height = height,width = width)
}
scatter.plot(sim=temp.interpolated,
obs=obs_temp,
sim.start="2017-06-06",
sim.end="2017-06-15",
plot.start="2017-06-06",
plot.end="2017-06-15",
plot.save=FALSE,
min.depth = 0,max.depth = 13,by.value = 0.5)
scatter.plot(sim=temp.interpolated,
obs=obs_temp,
sim.start="2017-06-06",
sim.end="2017-06-15",
plot.start="2017-06-06",
plot.end="2017-06-15",
plot.save=FALSE,
min.depth = 0,max.depth = 13,by.value = 0.5)
plot(p)
devtools::document()
devtools::load_all()
devtools::document()
scatter.plot(sim=temp.interpolated,
obs=obs_temp,
sim.start="2017-06-06",
sim.end="2017-06-15",
plot.start="2017-06-06",
plot.end="2017-06-15",
plot.save=FALSE,
min.depth = 0,max.depth = 13,by.value = 0.5)
scatter.plot<-function(sim=temp.interpolated,
obs=obs.temp,
sim.start="2017-06-06",
sim.end="2020-02-29",
plot.start="2017-06-06",
plot.end="2020-02-29",
min.depth=0,max.depth,by.value,
plot.save=TRUE,
file_name,
height=4,
width=7){
#---
# 1. simulation period
#---
sim.date<-seq.Date(from = as.Date(sim.start,format="%Y-%m-%d"),
to = as.Date(sim.end,format="%Y-%m-%d"),
by="day")
#---
# 2. combine sim with obs by Date and Depth
#---
sim.temp<-as.data.frame(sim)
colnames(sim.temp)<-sim.date
sim.temp$Depth<-seq(min.depth,max.depth,by=by.value)
colnames(obs)<-c("Date","Depth","Value")
obs<-obs%>%
mutate(Date=as.Date(Date,format="%Y-%m-%d"))
temp.both<-sim.temp%>%
pivot_longer(-Depth,names_to = "Date",values_to = "sim")%>%
mutate(Date=as.Date(Date,format="%Y-%m-%d"))%>%
right_join(.,obs,by=c("Date","Depth"))%>%
filter(Date>=plot.start&Date<=plot.end)
colnames(temp.both)[4]<-"obs"
#---
# 3.report two objective functions' value and scatter plot sim vs. obs
#---
#message(NSE(temp.both$sim,obs=temp.both$obs))   #NSE
#message(sqrt(mean((temp.both$sim-temp.both$obs)^2,na.rm = TRUE)))  # RMSE
p<-temp.both%>%
ggplot(aes(x=obs,y=sim,colour=Depth))+
geom_point()+
geom_abline(color="red")+
scale_color_gradientn(colors = brewer.pal(11, "Spectral"), name = "Depth (m)")+
xlab("Observed")+
ylab("Simulated")+
theme_classic()
p
if(plot.save){
p+ggsave(filename = file_name,height = height,width = width)
}
}
scatter.plot(sim=temp.interpolated,
obs=obs_temp,
sim.start="2017-06-06",
sim.end="2017-06-15",
plot.start="2017-06-06",
plot.end="2017-06-15",
plot.save=FALSE,
min.depth = 0,max.depth = 13,by.value = 0.5)
scatter.plot<-function(sim=temp.interpolated,
obs=obs.temp,
sim.start="2017-06-06",
sim.end="2020-02-29",
plot.start="2017-06-06",
plot.end="2020-02-29",
min.depth=0,max.depth,by.value,
plot.save=TRUE,
file_name,
height=4,
width=7){
#---
# 1. simulation period
#---
sim.date<-seq.Date(from = as.Date(sim.start,format="%Y-%m-%d"),
to = as.Date(sim.end,format="%Y-%m-%d"),
by="day")
#---
# 2. combine sim with obs by Date and Depth
#---
sim.temp<-as.data.frame(sim)
colnames(sim.temp)<-sim.date
sim.temp$Depth<-seq(min.depth,max.depth,by=by.value)
colnames(obs)<-c("Date","Depth","Value")
obs<-obs%>%
mutate(Date=as.Date(Date,format="%Y-%m-%d"))
temp.both<-sim.temp%>%
pivot_longer(-Depth,names_to = "Date",values_to = "sim")%>%
mutate(Date=as.Date(Date,format="%Y-%m-%d"))%>%
right_join(.,obs,by=c("Date","Depth"))%>%
filter(Date>=plot.start&Date<=plot.end)
colnames(temp.both)[4]<-"obs"
#---
# 3.report two objective functions' value and scatter plot sim vs. obs
#---
#message(NSE(temp.both$sim,obs=temp.both$obs))   #NSE
#message(sqrt(mean((temp.both$sim-temp.both$obs)^2,na.rm = TRUE)))  # RMSE
p<-temp.both%>%
ggplot(aes(x=obs,y=sim,colour=Depth))+
geom_point()+
geom_abline(color="red")+
scale_color_gradientn(colors = brewer.pal(11, "Spectral"), name = "Depth (m)")+
xlab("Observed")+
ylab("Simulated")+
theme_classic()
plot(p)
if(plot.save){
p+ggsave(filename = file_name,height = height,width = width)
}
}
scatter.plot(sim=temp.interpolated,
obs=obs_temp,
sim.start="2017-06-06",
sim.end="2017-06-15",
plot.start="2017-06-06",
plot.end="2017-06-15",
plot.save=FALSE,
min.depth = 0,max.depth = 13,by.value = 0.5)
prof.plot(sim=temp.interpolated,
obs = obs_temp,
sim.start="2017-06-06",
sim.end="2017-06-15",
plot.start="2017-06-06",
plot.end="2017-06-15",
xlabel = "Temperature \u00B0C",
min.depth = 0,max.depth = 13,by.value = 0.5)
prof.plot<-function(sim=temp.interpolated,
obs=obs.temp,
sim.start="2017-06-06",
sim.end="2020-02-29",
plot.start="2017-06-06",
plot.end="2020-02-29",
xlabel="Temperature \u00B0C",
min.depth=0,max.depth,by.value,
plot.save=FALSE,
file_name,
height=11,width=18){
#---
# 1. simulation period
#---
sim.date<-seq.Date(from = as.Date(sim.start,format="%Y-%m-%d"),
to = as.Date(sim.end,format="%Y-%m-%d"),
by="day")
#---
# 2. combine sim with obs by Date and Depth
#---
sim.temp<-as.data.frame(sim)
colnames(sim.temp)<-sim.date
sim.temp$Depth<-seq(min.depth,max.depth,by= by.value)
colnames(obs)<-c("Date","Depth","Value")
obs<-obs%>%
mutate(Date=as.Date(Date,format="%Y-%m-%d"))
temp.both<-sim.temp%>%
pivot_longer(-Depth,names_to = "Date",values_to = "sim")%>%
mutate(Date=as.Date(Date,format="%Y-%m-%d"))%>%
right_join(.,obs,by=c("Date","Depth"))%>%
filter(Date>=plot.start&Date<=plot.end)
colnames(temp.both)[4]<-"obs"
#---
# 3. profile plot sim vs. obs, faceted by Date
#---
p<-temp.both%>%
ggplot()+
geom_point(aes(y=Depth,x=obs),col="red")+
geom_path(aes(y=Depth,x=sim))+
facet_wrap(~Date)+
ylim(max.depth,min.depth)+
xlab(xlabel)+
ylab("Depth (m)")+
theme_classic()
plot(p)
if(plot.save){
p+ggsave(filename = file_name,height = height,width = width)
}
}
prof.plot(sim=temp.interpolated,
obs = obs_temp,
sim.start="2017-06-06",
sim.end="2017-06-15",
plot.start="2017-06-06",
plot.end="2017-06-15",
xlabel = "Temperature \u00B0C",
min.depth = 0,max.depth = 13,by.value = 0.5)
ts.plot<-function(sim=temp.interpolated,
obs=obs.temp,
target.depth=c(1,6,12,30),
sim.start="2017-06-06",
sim.end="2020-02-29",
plot.start="2017-06-06",
plot.end="2020-02-29",
min.depth=0,max.depth=33,by.value=0.5,
ylabel="Temperature \u00B0C",
plot.save=FALSE,
file_name,
height=7,
width=11){
#---
# 1. simulation period
#---
sim.date<-seq.Date(from = as.Date(sim.start,format="%Y-%m-%d"),
to = as.Date(sim.end,format="%Y-%m-%d"),
by="day")
#---
# 2. combine sim with obs by Date and Depth
#---
sim.temp<-as.data.frame(sim)
colnames(sim.temp)<-sim.date
sim.temp$Depth<-seq(min.depth,max.depth,by=by.value)
colnames(obs)<-c("Date","Depth","Value")
obs<-obs%>%
mutate(Date=as.Date(Date,format="%Y-%m-%d"))
temp.both<-sim.temp%>%
pivot_longer(-Depth,names_to = "Date",values_to = "sim")%>%
mutate(Date=as.Date(Date,format="%Y-%m-%d"))%>%
left_join(.,obs,by=c("Date","Depth"))%>%
filter(Date>=plot.start&Date<=plot.end)
colnames(temp.both)[4]<-"obs"
#---
# 3. time series plot sim vs. obs, faceted by Depth
#---
p<-temp.both%>%
filter(Depth %in% target.depth)%>%
ggplot()+
geom_line(aes(x=Date,y=sim))+
geom_point(aes(x=Date,y=obs),col="red")+
facet_grid(~Depth)+
theme_classic()+
labs(y=ylabel)
plot(p)
if(plot.save){
p+ggsave(filename = file_name,height = height,width = width)
}
}
ts.plot(sim = temp.interpolated,
obs = obs_temp,
target.depth=c(1,6),
sim.start="2017-06-06",
sim.end="2017-06-15",
plot.start="2017-06-06",
plot.end="2017-06-15",
ylabel="Temperature \u00B0C",
min.depth=0,
max.depth=13,
by.value=0.5)
devtools::load_all()
devtools::document()
?par
?on.exit
library(usethis)
library(usethis)
devtools::load_all()
devtools::document()
library(Rtools)
install.packages("Rtools")
installed.packages("roxygen2")
library(roxygen2)
install.packages("roxygen2")
install.packages("Rtools")
setwd("D:/New folder/Google Drive/R_Practice")
Sys.which("make")
Sys.which("make")
#---
# 1. load all developed functions and internal data (like the "library" function)
#---
devtools::load_all() # the working directory should be in the top level package folder
devtools::document()
var.values<-extract.output(dycd.output="data/dysim.nc",var.extract=c("TEMP"))
var.values<-extract.output(dycd.output="data/dysim.nc",var.extract=c("TEMP"))
var.values<-extract.output(dycd.output="extdata/dysim.nc",var.extract=c("TEMP"))
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
var.values<-ext.output(dycd.output="extdata/dysim.nc",var.extract=c("TEMP"))
data(dysim.nc)
?nc_create
var.values$dyresmTEMPTURE_Var
?ncdim_def
?ncvar_def
dycd.output="extdata/dysim.nc"
var.extract=c("TEMP")
simData <- nc_open(dycd.output)
simData
varNames <- names(simData$var)
varNames
simData$ndims
simData$filename
simData$id
simData$natts
simData$dim
simData$dim[1]
simData$ndims
simData$dim[2]
# Define an integer dimension
dimState <- ncdim_def( "StateNo", "count", 1:50 )
dimState
# Make an integer variable.  Note that an integer variable can have
# a double precision dimension, or vice versa; there is no fixed
# relationship between the precision of the dimension and that of the
# associated variable.  We just make an integer variable here for
# illustration purposes.
varPop <- ncvar_def("Pop", "count", dimState, -1,
longname="Population", prec="integer")
varPop
# Create a netCDF file with this variable
ncnew <- nc_create( "states_population.nc", varPop )
# Write some values to this variable on disk.
popAlabama <- 4447100
?ncvar_pur
?ncvar_put
ncvar_put( ncnew, varPop, popAlabama, start=1, count=1 )
nc_close(ncnew)
nc_close(simData)
devtools::load_all()
devtools::document()
system.file("extdata", "dysim.nc", package = "dycdtools")
devtools::load_all()
devtools::document()
